pipeline {
    agent any

    environment {
        // Define any environment variables here if needed
        DOCKER_IMAGE = "umaxcode/jenkins-masterclass"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from your repository
                script {
                    def gitRepoUrl = "https://github.com/UmaxCode/Jenkins_masterclass.git"
                    checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[url: gitRepoUrl]]])
                    extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow:true, depth: 1]]
                }
            }
        }
        stage('Build') {
            steps {
                // Build the Spring Boot application using Maven
                // sh './mvnw clean package -DskipTests'
                sh '''
                    ls
                    pwd
                    echo "This is my Build stage"
                '''
            }
        }
        stage('Test') {
            steps {
                // Run tests using Maven
                // sh './mvnw test'
                sh 'echo "This is my Test stage"'
            }
        }
        stage('Docker Build') {
            steps {
                // Build the Docker image
                // sh 'docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .'
                sh ' echo "This is my Docker Build stage"'
            }
        }
        stage('Docker Push') {
            steps {
                // Push the Docker image to Docker Hub (or another registry)
                // withCredentials([string(credentialsId: 'c_id', variable: 'DOCKER_PASSWORD')]) {
                //     sh '''
                //         echo "$DOCKER_PASSWORD" | docker login -u umaxcode --password-stdin
                //         docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
                //     '''
                // }
                sh ' ehco "This is my Docker Push stage"'
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
